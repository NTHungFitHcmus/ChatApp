{"version":3,"sources":["logo.svg","images/Untitled.png","firebase/firebase.js","actions/auth.js","components/Login.js","actions/type.js","components/Dashboard.js","App.js","serviceWorker.js","reducers/index.js","reducers/authReducer.js","store/index.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","googleAuthProvider","GoogleAuthProvider","firebaseLogout","auth","signOut","Login","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","history","dispatch","signInWithPopup","onAuthStateChanged","user","console","log","uid","displayName","userLogin","id","name","type","data","push","react_default","a","createElement","className","src","require","onClick","handleClick","bind","Component","connect","Dashboard","_this","state","loaded","setState","createHistory","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","rootReducer","combineReducers","firebaseReducer","arguments","length","undefined","action","objectSpread","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.750d43dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/Untitled.1d9cbe4d.png\";","import * as firebase from 'firebase';\r\n \r\nconst config = {\r\n    apiKey: \"AIzaSyAiauctP3FOarS8nTgstJCwL_TrymV7-xo\",\r\n    authDomain: \"chattingreact-1512218.firebaseapp.com\",\r\n    databaseURL: \"https://chattingreact-1512218.firebaseio.com\",\r\n    projectId: \"chattingreact-1512218\",\r\n    storageBucket: \"chattingreact-1512218.appspot.com\",\r\n    messagingSenderId: \"946184587005\"\r\n  };\r\n  firebase.initializeApp(config);\r\nconst database = firebase.database();\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n \r\nexport { firebase, googleAuthProvider, database as default };\r\n","import {firebase, googleAuthProvider} from '../firebase/firebase';\r\nimport {LOGIN, LOGOUT} from './type';\r\n\r\nexport const login = (data) => ({\r\n\ttype: LOGIN,\r\n\tid: data.id,\r\n\tname: data.name\r\n});\r\n\r\nexport const logout = () => ({\r\n\ttype: LOGOUT\r\n});\r\n\r\nexport const firebaseLogin = () => {\r\n\treturn () => {\r\n\t\treturn firebase.auth().signInWithPopup(googleAuthProvider);\r\n\t};\r\n};\r\n\r\nexport const firebaseLogout = () => {\r\n\treturn () => {\r\n\t\treturn firebase.auth().signOut();\r\n\t};\r\n};","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {firebaseLogin} from '../actions/auth';\r\nimport firebase from 'firebase';\r\nimport {login, logout} from '../actions/auth';\r\nimport '../App.css';\r\n\r\nclass Login extends Component {\r\n\tconstructor(props){\r\n    super(props)\r\n  };\r\n\t\r\n\thandleClick()\r\n\t{\r\n\t\tconst {history, dispatch} = this.props;\r\n\t\tdispatch(firebaseLogin());\r\n\t\tfirebase.auth().onAuthStateChanged(user => {\r\n\t\t\t\tif (user) {\r\n\t\t\t\t\tconsole.log('login user id: ', user.uid);\r\n\t\t\t\t\tconsole.log('name: ', user.displayName);\r\n\t\t\t\t\tconst userLogin = {\r\n\t\t\t\t\t\tid: user.uid,\r\n\t\t\t\t\t\tname: user.displayName\r\n\t\t\t\t\t};\r\n\t\t\t\t\tdispatch(login(userLogin));\r\n\t\t\t\t\thistory.push('/dashboard');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\thistory.push('/');\r\n\t\t\t\t}\r\n\t\t});\r\n\t\tconsole.log('login');\r\n\t};\r\n\t\r\n  render() {\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<div className='ContainerLogin'>\r\n\t\t\t\t\t<div><img src={require('../images/Untitled.png')}/></div>\r\n\t\t\t\t\t<button className = 'BtnLogin' onClick = {this.handleClick.bind(this)}> Join us </button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default connect()(Login);","export const LOGIN = 'login';\r\nexport const LOGOUT = 'logout';","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {firebaseLogout, logout} from '../actions/auth';\r\nimport firebase from 'firebase';\r\n\r\nconst mapStateToProps = (state) => {\r\n\tconsole.log('state ');\r\n\tconsole.log(state);\r\n\treturn {\r\n\t\tauth: state.auth\r\n\t}\r\n}\r\n\r\nclass Dashboard extends Component {\r\n\tconstructor(props){\r\n    super(props);\r\n\t\tthis.state = {\r\n\t\t\tloaded: false\r\n\t\t};\r\n  };\r\n\t\r\n\tcomponentWillMount(){\r\n\t\tconsole.log(this.props.auth.name);\r\n\t\tconst {history, dispatch} = this.props; \r\n\t\tfirebase.auth().onAuthStateChanged(user => {console.log('user'); console.log(user)});\r\n\t\t\tif (this.props.auth.name) {}\r\n\t\t\telse {\r\n\t\t\t\tconsole.log('false');\t\t\t\t\r\n\t\t\t\tdispatch(firebaseLogout());\r\n\t\t\t\tdispatch(logout());\r\n\t\t\t\thistory.push('/');\r\n\t\t\t}\r\n\t\t\tthis.setState({loaded: true});\r\n  };\r\n\t\r\n\thandleClick()\r\n\t{\r\n\t\tconst {dispatch} = this.props;\r\n\t\tconsole.log('1: ' + this.props.auth.name);\r\n\t\tdispatch(firebaseLogout());\r\n\t\tdispatch(logout());\r\n\t\tconsole.log('2: ' + this.props.auth.name);\r\n\t\tconsole.log('logout');\r\n\t};\r\n\t\r\n  render() {\r\n\t\tif (this.state.loaded === false) return (<div></div>);\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<div> Xin ch√†o {this.props.auth.name}!</div>\r\n\t\t\t\t<button className='BtnLogin' onClick = {this.handleClick.bind(this)}> Logout </button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps)(Dashboard);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\nimport firebase from 'firebase';\nimport {BrowserRouter as Router, Route,  Link} from 'react-router-dom';\nimport createHistory from 'history/createBrowserHistory';\nimport {connect} from 'react-redux';\n\nexport const history = createHistory();\n\nclass App extends Component {\n  render() {\n    return (\t\t\n      <body>\n\t\t\t\t<Router history = {history}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Route exact path=\"/\" component={Login} />\n\t\t\t\t\t\t<Route exact path=\"/dashboard\" component={Dashboard} />\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n      </body>\n    );\n  }\n}\n\n\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\nimport authReducer from './authReducer'\r\n\r\n// Add firebase to reducers\r\nconst rootReducer = combineReducers({\r\n  firebase: firebaseReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport default rootReducer;","import {LOGIN, LOGOUT} from '../actions/type';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n\tswitch (action.type){\r\n\t\tcase LOGIN:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tid: action.id,\r\n\t\t\t\tname: action.name\r\n\t\t\t};\r\n\t\tcase LOGOUT:\r\n\t\t\treturn {};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from '../reducers';\r\n\r\nconst rootReducer = createStore(\r\n\treducers,\r\n\tapplyMiddleware(thunk)\r\n);\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { compose, createStore } from 'redux';\nimport { reactReduxFirebase } from 'react-redux-firebase';\nimport firebase from 'firebase';\nimport rootReducer from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n\t<Provider store = {rootReducer}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}